#!/bin/bash

# Reference: https://github.com/andrebrait/unraid-native-zfs-encryption?tab=readme-ov-file#setting-up-the-startup-script

zfs_automount_logger() {
    if [ "$2" = "error" ]; then
        priority="user.err"
        /usr/local/emhttp/webGui/scripts/notify -s "ZFS Automount" -d "$1" -i alert
    else
        priority="user.notice"
    fi
    logger -p $priority -t "zfs_automount" "$1"
}

# Discover all encrypted datasets we have, skipping over the prompt key locations
declare -a encrypted_datasets=($(zfs list -r -t filesystem -H -o name,keylocation | grep -F '/' | grep -vE '\b(none|prompt)\b' | cut -d$'\t' -f1))

for d in "${encrypted_datasets[@]}"; do
    # Ensure the regular location is immutable so nothing can write to it unless we're mounted!
    mountpoint="$(zfs list -H -o mountpoint "${d}")"
    out="$(mkdir -p "${mountpoint}" 2>&1 && chattr +i "${mountpoint}" 2>&1)"
    if (($? != 0)); then
        zfs_automount_logger "Failed to create directory for ${d}: ${out}" "error"
        continue
    fi

    out="$(zfs load-key -r "${d}" 2>&1)"
    if (($? != 0)); then
        zfs_automount_logger "Failed to load key for ${d}: ${out}" "error"
        continue
    fi

    out="$(zfs mount "${d}" 2>&1)"
    if (($? == 0)); then
        zfs_automount_logger "Mounted ZFS dataset ${d}"
    else
        zfs_automount_logger "Failed to mount ZFS dataset ${d}: ${out}" "error"
        continue
    fi
done


declare -a encrypted_datasets=($(zfs list -r -t volume -H -o name,keylocation | grep -F '/' | grep -vE '\b(none|prompt)\b' | cut -d$'\t' -f1))

for d in "${encrypted_datasets[@]}"; do
    out="$(zfs load-key -r "${d}" 2>&1)"
    if (($? == 0)); then
        zfs_automount_logger "Mounted ZFS dataset ${d}"
    else
        zfs_automount_logger "Failed to load key for ${d}: ${out}" "error"
        continue
    fi
done


docker_mountpoint="/mnt/kokorowatari/system/docker"
out="$(mkdir -p "${docker_mountpoint}" 2>&1 && chattr +i "${docker_mountpoint}" 2>&1)"
if (($? != 0)); then
    zfs_automount_logger "Failed to prepare Docker mountpoint: ${out}" "error"
    exit
fi

out="$(mount /dev/zvol/kokorowatari/system/docker "${docker_mountpoint}" 2>&1)"
if (($? == 0)); then
    zfs_automount_logger "Mounted Docker ZFS volume"
else
    zfs_automount_logger "Failed to mount Docker ZFS volume: ${out}" "error"
fi