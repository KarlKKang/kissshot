<?xml version='1.0' standalone='yes'?>
<!DOCTYPE PLUGIN [
<!ENTITY name      "kissshot-plugin">
<!ENTITY author    "KarlKKang">
<!ENTITY version   "2025.05.25">
<!ENTITY md5       "72dc9a6fb4c27b6db2f2e513e1def603">
]>

<PLUGIN name="&name;" author="&author;" version="&version;" icon="terminal">

<CHANGES>
###2025.05.25
- Revert back mounting the system share from the boot device.
- Ignore datasets with `canmount` not set to `on` when mounting.
- Disable btrfs health checks.
- Trigger zpool scrubs from the health check script.
- Don't try to mount already mounted ZFS datasets when automounting.

###2025.05.24
- Mount the system share from the boot btrfs device.
- Trim the boot device.

###2025.05.16
- Remove the interactive option of the restic docker run command.

###2025.05.15
- Remount root ZFS datasets with `noatime` correctly set.

###2025.05.14
- Use host network for restic.
- Improve logging.
- Rename `zfs-auto-snapshot` to `zfs-backup`.

###2025.05.13
- Add a microcode check when installing the plugin.

###2025.05.11
- Destroy the snapshots if the VM failed to thaw, as the snapshots are likely not in a consistent state.

###2025.05.10
- Remove the docker ZVOL.
- Fix snapshots not taken when the VM is running.

###2025.05.09
- Refactor to reduce code duplication.

###2025.05.08
- Fix a race condition in array lock handling.

###2025.05.07
- Unmount ZFS snapshots after sending to restic.
- Execute zfs-init on `starting` event.
- Improved array status check and runtime state file handling.

###2025.05.04
- Unmount non-root ZFS datasets before stopping the array.
- Log `zpool status` non-zero exit codes as unhealthy.

###2025.04.30
- Get all mounted btrfs devices programatically.

###2025.04.29
- Add hourly health check for ZFS and btrfs.
- Btrfs monthly scrub as a health check routine.

###2025.04.28
- Wait for ZVOL to become available before mounting.

###2025.04.23
- Log successful TRIM operations.

###2025.04.06
- Use a custom TRIM script to avoid double TRIM on the docker volume.

###2025.03.30
- Enable trimming on every script run.
- Early exit if trimming fails.

###2025.03.23
- Set `zfs_arc_max` when disks are mounted.
- Rescan directory before removing when cleaning the recycle bin.

###2025.03.12
- Limit restic memory to 1GB.
- Backup the photo library.

###2025.03.11
- Use a named Docker volume for restic cache.

###2025.03.10
- Send `appdata` share to restic.

###2025.03.09
- Reduce ZFS snapshot retention period.
- Fix cron job not registered on install.

###2025.03.07
- Merge into a monolithic plugin.

###2025.03.03
- Improved error handling and logging.

###2025.03.01
- Enable error reporting and check script exit code.

###2025.02.28
- Migrate to PHP.

###2025.02.26
- Auto mount docker ZVOL.
- Continue to mount other ZFS datasets if one fails.

###2025.02.15
- Auto unlock encrypted ZFS volumes.

###2025.02.08
- Reduce the number of logs.
- Send WebGUI alerts on unload key errors.

###2025.02.05
- Initial Release.
</CHANGES>

<!--
Get the plugin bundle.
-->
<FILE Name="/boot/config/plugins/&name;/&name;-&version;.txz">
<MD5>&md5;</MD5>
</FILE>

<!--
The 'pre-install' script.
-->
<FILE Run="/bin/bash">
<INLINE>
# Remove emhttp files so we can re-install.
rm -f /etc/cron.daily/&name;.daily.sh 2&gt;&amp;1
rm -f /etc/cron.hourly/&name;.hourly.sh 2&gt;&amp;1
rm -f -r /usr/local/emhttp/plugins/&name; 2&gt;&amp;1

# Remove old 'bundle' files.
rm -f $(ls /boot/config/plugins/&name;/&name;*.txz | grep -v '&version;') 2&gt;&amp;1
</INLINE>
</FILE>

<!--
Install the plugin bundle.
-->
<FILE Run="/bin/bash">
<INLINE>
# Install the 'bundle'.
mkdir -p /usr/local/emhttp/plugins/&name; 2&gt;&amp;1
tar -xf /boot/config/plugins/&name;/&name;-&version;.txz -C /usr/local/emhttp/plugins/&name; 2&gt;&amp;1
mv /usr/local/emhttp/plugins/&name;/cron/&name;.daily.sh /etc/cron.daily/&name;.daily.sh 2&gt;&amp;1
mv /usr/local/emhttp/plugins/&name;/cron/&name;.hourly.sh /etc/cron.hourly/&name;.hourly.sh 2&gt;&amp;1
</INLINE>
</FILE>

<!--
The 'post-install' script.
-->
<FILE Run="/bin/bash">
<INLINE>
echo ""
echo "-----------------------------------------------------------"
echo " &name; is installed."
echo " Copyright 2025, &author;"
echo " Version: &version;"
echo "-----------------------------------------------------------"
echo ""
SCRIPT_NAME="microcode-check" NOTIFICATION_TITLE="Microcode Check" /usr/local/emhttp/plugins/&name;/run_php.sh 2&gt;&amp;1
</INLINE>
</FILE>

<!--
The 'remove' script.
-->
<FILE Run="/bin/bash" Method="remove">
<INLINE>
# Remove all plugin files.
rm -f /etc/cron.daily/&name;.daily.sh 2&gt;&amp;1
rm -f /etc/cron.hourly/&name;.hourly.sh 2&gt;&amp;1
rm -f -r /usr/local/emhttp/plugins/&name; 2&gt;&amp;1
rm -f /boot/config/plugins/&name;/&name;-&version;.txz 2&gt;&amp;1
rmdir --ignore-fail-on-non-empty /boot/config/plugins/&name; 2&gt;&amp;1

echo ""
echo "-----------------------------------------------------------"
echo " &name; has been removed."
echo " Version: &version;"
echo "-----------------------------------------------------------"
echo ""
</INLINE>
</FILE>

</PLUGIN>
