#!/usr/bin/php
<?php
#description=This script will take and manage the snapshots of ZFS datasets
#arrayStarted=true

# Run on schedule: 0 3 * * *

$config = [
    [
        'domain' => 'TSUKIHI',
        'datasets' => [
            'kokorowatari/vol1' => [
                'retain' => 30 * 24 * 60 * 60,
            ],
            'kokorowatari/vol2' => [
                'retain' => 30 * 24 * 60 * 60,
            ],
        ]
    ],
];

enum LOG_LEVEL: string
{
    case INFO = 'notice';
    case WARNING = 'warning';
    case ERROR = 'err';
}

const ALPHABET = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
const SNAPSHOT_PREFIX = 'zfs-auto-snap_';

function logger(string $message, LOG_LEVEL $level = LOG_LEVEL::INFO): void
{
    try {
        exec('logger -t zfs-auto-snapshot -p user.' . $level->value . ' ' . escapeshellarg($message));
    } catch (ValueError $e) {
        echo 'Failed to log message: ' . $e->getMessage() . PHP_EOL;
    }
}

function system_command(string $command, array &$output = []): bool
{
    $command .= ' 2>&1';
    logger($command);
    try {
        $result = exec($command, $output, $retval);
    } catch (ValueError $e) {
        logger('Failed to execute system command: ' . $e->getMessage(), LOG_LEVEL::ERROR);
        return false;
    }
    if ($retval !== 0 || $result === false) {
        logger('Command failed with exit code ' . $retval, LOG_LEVEL::ERROR);
        foreach ($output as $line) {
            logger($line, LOG_LEVEL::ERROR);
        }
        return false;
    }
    return true;
}

function get_snapshots(string $dataset): array|false
{
    $snapshots = [];
    $output = [];
    system_command('zfs list -t snapshot -H -p -o name,creation ' . escapeshellarg($dataset), $output);
    foreach ($output as $line_str) {
        $line = explode("\t", $line_str);
        if (count($line) !== 2) {
            logger('Failed to get snapshots for dataset ' . $dataset . ': ' . $line_str, LOG_LEVEL::ERROR);
            return false;
        }
        $snapshot_name = $line[0];
        if (!str_starts_with($snapshot_name, $dataset . '@')) {
            logger('Invalid snapshot name for dataset ' . $dataset . ': ' . $line_str, LOG_LEVEL::ERROR);
            return false;
        }
        $snapshot_name = substr($snapshot_name, strlen($dataset) + 1);
        if (!str_starts_with($snapshot_name, SNAPSHOT_PREFIX)) {
            continue;
        }
        $snapshot_name = substr($snapshot_name, strlen(SNAPSHOT_PREFIX));
        $creation_time_str = $line[1];
        if (!ctype_digit($creation_time_str)) {
            logger('Invalid snapshot creation time for dataset ' . $dataset . ': ' . $line_str, LOG_LEVEL::ERROR);
            return false;
        }
        $creation_time = intval($creation_time_str);
        if ($creation_time === 0) {
            logger('Invalid snapshot creation time for dataset ' . $dataset . ': ' . $line_str, LOG_LEVEL::ERROR);
            return false;
        }
        $snapshots[$snapshot_name] = $creation_time;
    }
    return $snapshots;
}

function generate_random_string(int $length): string
{
    $alphabet_length = strlen(ALPHABET);
    $random_string = '';
    for ($i = 0; $i < $length; $i++) {
        $random_string .= ALPHABET[rand(0, $alphabet_length - 1)];
    }
    return $random_string;
}

function destroy_snapshot(string $dataset, string $snapshot_name): void
{
    system_command('zfs destroy ' . escapeshellarg($dataset . '@' . SNAPSHOT_PREFIX . $snapshot_name));
}

function cleanup_snapshots(string $dataset, array $snapshots, int $retain): void
{
    $current_time = time();
    foreach ($snapshots as $snapshot_name => $creation_time) {
        if ($current_time - $creation_time > $retain) {
            destroy_snapshot($dataset, $snapshot_name);
        }
    }
}

function get_domain_state(string $domain): string|false
{
    $output = [];
    if (!system_command('virsh domstate ' . escapeshellarg($domain), $output)) {
        logger('Failed to get domain state for domain ' . $domain, LOG_LEVEL::ERROR);
        return false;
    }
    $state = $output[0] ?? null;
    if (!is_string($state)) {
        logger('Invalid domain state for domain ' . $domain . ': ' . json_encode($output), LOG_LEVEL::ERROR);
        return false;
    }
    return $state;
}

function fs_freeze(string $domain): bool
{
    $result = system_command('virsh domfsfreeze ' . escapeshellarg($domain));
    if (!$result) {
        logger('Failed to freeze filesystem for domain ' . $domain, LOG_LEVEL::ERROR);
    }
    return $result;
}

function fs_thaw(string $domain): void
{
    if (!system_command('virsh domfsthaw ' . escapeshellarg($domain))) {
        logger('Failed to thaw filesystem for domain ' . $domain, LOG_LEVEL::ERROR);
    }
}

function main(array $config): void
{
    foreach ($config as $txg) {
        $datasets = $txg['datasets'] ?? null;
        if (!is_array($datasets)) {
            logger('Invalid datasets configuration: ' . json_encode($txg), LOG_LEVEL::ERROR);
            continue;
        }
        if (count($datasets) === 0) {
            logger('No datasets configured: ' . json_encode($txg), LOG_LEVEL::WARNING);
            continue;
        }

        $create_cmd = 'zfs snapshot';
        $cleanup_args = [];
        foreach ($datasets as $dataset => $dataset_config) {
            $existing_snapshots = get_snapshots($dataset);
            if ($existing_snapshots === false) {
                continue;
            }
            $new_snapshot_name = generate_random_string(8);
            while (array_key_exists($new_snapshot_name, $existing_snapshots)) {
                $new_snapshot_name = generate_random_string(8);
            }
            $new_snapshot_name = SNAPSHOT_PREFIX . $new_snapshot_name;
            $create_cmd .= ' ' . escapeshellarg($dataset . '@' . $new_snapshot_name);
            $cleanup_args[] = [$dataset, $existing_snapshots, $dataset_config['retain']];
        }

        $domain = $txg['domain'] ?? null;
        $domain_is_running = false;
        if ($domain !== null) {
            if (!is_string($domain)) {
                logger('Invalid domain configuration: ' . json_encode($txg), LOG_LEVEL::ERROR);
                continue;
            }
            $domain_state = get_domain_state($domain);
            if ($domain_state === false) {
                continue;
            }
            $domain_is_running = $domain_state === 'running';
            if ($domain_is_running && !fs_freeze($domain)) {
                continue;
            }
        }

        $create_success = system_command($create_cmd);
        if ($domain_is_running) {
            fs_thaw($domain);
        }
        if (!$create_success) {
            continue;
        }

        foreach ($cleanup_args as $cleanup_arg) {
            cleanup_snapshots(...$cleanup_arg);
        }
    }
}

main($config);
