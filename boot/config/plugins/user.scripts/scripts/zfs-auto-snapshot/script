#!/usr/bin/php
<?php
#description=This script will take and manage the snapshots of ZFS datasets
#arrayStarted=true

# Run on schedule: 0 3 * * *

$config = [
    'kokorowatari/vol1' => [
        'retain' => 30 * 24 * 60 * 60,
    ],
    'kokorowatari/vol2' => [
        'retain' => 30 * 24 * 60 * 60,
    ]
];

enum LOG_LEVEL: string
{
    case INFO = 'notice';
    case ERROR = 'err';
}

const ALPHABET = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
const SNAPSHOT_PREFIX = 'zfs-auto-snap_';

function logger(string $message, LOG_LEVEL $level = LOG_LEVEL::INFO): void
{
    try {
        exec('logger -t zfs-auto-snapshot -p user.' . $level->value . ' ' . escapeshellarg($message));
    } catch (ValueError $e) {
        echo 'Failed to log message: ' . $e->getMessage() . PHP_EOL;
    }
}

function system_command(string $command, array &$output = []): bool
{
    $command .= ' 2>&1';
    try {
        $result = exec($command, $output, $retval);
    } catch (ValueError $e) {
        logger('Failed to execute system command: ' . $e->getMessage(), LOG_LEVEL::ERROR);
        return false;
    }
    if ($retval !== 0 || $result === false) {
        logger('Failed to execute system command with exit code ' . $retval . ': ' . $command, LOG_LEVEL::ERROR);
        foreach ($output as $line) {
            logger($line, LOG_LEVEL::ERROR);
        }
        return false;
    }
    return true;
}

function get_snapshots(string $dataset): array|false
{
    $snapshots = [];
    $output = [];
    system_command('zfs list -t snapshot -H -p -o name,creation ' . escapeshellarg($dataset), $output);
    foreach ($output as $line_str) {
        $line = explode("\t", $line_str);
        if (count($line) !== 2) {
            logger('Failed to get snapshots for dataset ' . $dataset . ': ' . $line_str, LOG_LEVEL::ERROR);
            return false;
        }
        $snapshot_name = $line[0];
        if (!str_starts_with($snapshot_name, $dataset . '@')) {
            logger('Invalid snapshot name for dataset ' . $dataset . ': ' . $line_str, LOG_LEVEL::ERROR);
            return false;
        }
        $snapshot_name = substr($snapshot_name, strlen($dataset) + 1);
        if (!str_starts_with($snapshot_name, SNAPSHOT_PREFIX)) {
            continue;
        }
        $snapshot_name = substr($snapshot_name, strlen(SNAPSHOT_PREFIX));
        $creation_time_str = $line[1];
        if (!ctype_digit($creation_time_str)) {
            logger('Invalid snapshot creation time for dataset ' . $dataset . ': ' . $line_str, LOG_LEVEL::ERROR);
            return false;
        }
        $creation_time = intval($creation_time_str);
        if ($creation_time === 0) {
            logger('Invalid snapshot creation time for dataset ' . $dataset . ': ' . $line_str, LOG_LEVEL::ERROR);
            return false;
        }
        $snapshots[$snapshot_name] = $creation_time;
    }
    return $snapshots;
}

function generate_random_string(int $length): string
{
    $alphabet_length = strlen(ALPHABET);
    $random_string = '';
    for ($i = 0; $i < $length; $i++) {
        $random_string .= ALPHABET[rand(0, $alphabet_length - 1)];
    }
    return $random_string;
}

function create_snapshot(string $dataset, array $existing_snapshots): bool
{
    $snapshot_name = generate_random_string(8);
    while (array_key_exists($snapshot_name, $existing_snapshots)) {
        $snapshot_name = generate_random_string(8);
    }
    $snapshot_name = SNAPSHOT_PREFIX . $snapshot_name;
    return system_command('zfs snapshot ' . escapeshellarg($dataset . '@' . $snapshot_name));
}

function destroy_snapshot(string $dataset, string $snapshot_name): void
{
    system_command('zfs destroy ' . escapeshellarg($dataset . '@' . SNAPSHOT_PREFIX . $snapshot_name));
}

function cleanup_snapshots(string $dataset, array $snapshots, int $retain): void
{
    $current_time = time();
    foreach ($snapshots as $snapshot_name => $creation_time) {
        if ($current_time - $creation_time > $retain) {
            destroy_snapshot($dataset, $snapshot_name);
        }
    }
}

foreach ($config as $dataset => $dataset_config) {
    $snapshots = get_snapshots($dataset);
    if ($snapshots === false) {
        continue;
    }
    if (!create_snapshot($dataset, $snapshots)) {
        continue;
    }
    cleanup_snapshots($dataset, $snapshots, $dataset_config['retain']);
}
